parameters:
  - name: packageVersion 
    type: string

stages:
  - stage: Build_Application
    displayName: Build Application
    variables:
      isMaster: $[contains(variables['Build.SourceBranch'], 'main')]
      isRelease: $[contains(variables['Build.SourceBranch'], 'release')]
      isHotfix: $[contains(variables['Build.SourceBranch'], 'hotfix')]
      isDevelop: $[contains(variables['Build.SourceBranch'], 'develop')]
      isNewVersion: '0'
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        variables:
        - name: MAVEN_CACHE_FOLDER
          value: $(Pipeline.Workspace)/.m2/repository
        - name: MAVEN_OPTS
          value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
        steps:
        - checkout: self
          persistCredentials: true

        - task: Cache@2
          inputs:
            key: '$(Build.SourcesDirectory)/pom.xml'
            path: '$(MAVEN_CACHE_FOLDER)'
          displayName: Cache Maven local repo

        - task: DownloadSecureFile@1
          displayName: Download Settings.xml
          name: settingsxml
          inputs:
            secureFile: 'settings.xml'

        - task: PowerShell@2
          displayName: Copy Settings.xml to maven respository
          inputs:
            targetType: 'inline'
            script: |
              New-Item -Type Directory -Force "${HOME}/.m2"
              Copy-Item -Force "$(settingsxml.secureFilePath)" "${HOME}/.m2/settings.xml"

        - task: Maven@3
          displayName: Run Munit Tests
          inputs:
            mavenPomFile: 'pom.xml'
            mavenOptions: '-Xmx3072m'
            goals: 'clean test $(MAVEN_OPTS)'
            jdkVersionOption: '1.8'
            jdkArchitectureOption: 'x64'
            mavenAuthenticateFeed: true
            publishJUnitResults: false
            javaHomeOption: 'JDKVersion'
            mavenVersionOption: 'Default'
            effectivePomSkip: true
            sonarQubeRunAnalysis: false

        - task: Bash@3
          displayName: Check for Package version
          condition: eq(variables.isDevelop, 'true')
          inputs:
            targetType: 'inline'
            script: |
              # Check for New version

              versionPom=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout | rev | cut -c1- | rev`
              echo "Version in Package is : $versionPom"
              test "${{ parameters.packageVersion }}-SNAPSHOT" = "$versionPom" ; res=$?
              if [[ $res -eq 0 ]]
              then
                echo "Same package version exists. Skipping Set Artifact version and Commit to Repo task ..."
              else
                echo "Difference in POM version & Package version in Pipeline"
              fi
              echo "##vso[task.setvariable variable=isNewVersion]`echo $res`"

        - task: Bash@3
          displayName: Set Artifact version and Commit to Repo
          condition: or(ne(variables.isDevelop, 'true'),eq(variables['isNewVersion'], '1'))
          inputs:
            targetType: 'inline'
            script: |

              if [ $(isDevelop) == "True" ]
              then
                echo "New Version of Package is : ${{ parameters.packageVersion }}-SNAPSHOT"
                mvn versions:set -DnewVersion=${{ parameters.packageVersion }}-SNAPSHOT
              else
                if [ $(isRelease) == "True" ]
                then
                  vp=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout | rev | cut -c1- | rev | cut -d'-' -f2`
                  echo "Version in POM : $vp"
                  if [ $vp == "SNAPSHOT" ]
                  then
                    buildNum=1
                  else
                    buildNum=$((`echo $vp | cut -d'.' -f2` + 1))
                    echo "BuildNum is : $buildNum"
                  fi
                  echo "##vso[task.setvariable variable=buildNum]`echo $buildNum`"
                  echo "New Version of Package is : ${{ parameters.packageVersion }}-rc.$buildNum"
                  mvn versions:set -DnewVersion=${{ parameters.packageVersion }}-rc.$buildNum
                else
                  echo "New Version of Package is : ${{ parameters.packageVersion }}"
                  mvn versions:set -DnewVersion=${{ parameters.packageVersion }}
                fi  
              fi

              git config --global user.email "build@outlook.com"
              git config --global user.name "Build Agent"
              git add pom.xml
              git commit -m "This is a commit from Azure DevOps because the app version was set."
              git push origin HEAD:$(Build.SourceBranch)

        - task: Maven@3
          displayName: Deploy Package to Artifacts
          inputs:
            mavenPomFile: 'pom.xml'
            mavenOptions: '-Xmx3072m'
            jdkVersionOption: '1.8'
            jdkArchitectureOption: 'x64'
            mavenAuthenticateFeed: true
            publishJUnitResults: false
            javaHomeOption: 'JDKVersion'
            mavenVersionOption: 'Default'
            effectivePomSkip: true
            sonarQubeRunAnalysis: false
            goals: 'clean install package deploy:deploy $(MAVEN_OPTS) -DskipMunitTests'
        - task: Bash@3
          displayName: Create Tag
          inputs:
            targetType: 'inline'
            script: |
              # Write your commands here
              if [ $(isDevelop) == "True" ]
              then
                git tag ${{ parameters.packageVersion }}-SNAPSHOT
              else
                if [ $(isRelease) == "True" ]
                then
                  git tag ${{ parameters.packageVersion }}-rc.$(buildNum)
                else
                  git tag ${{ parameters.packageVersion }}
                fi
              fi
              git push origin --tags

        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(build.sourcesdirectory)'
            Contents: |
              target/*.jar
              pom.xml
            TargetFolder: '$(build.artifactstagingdirectory)'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'

  - stage: Deploy_to_Test
    displayName: Deploy To Test
    dependsOn: Build_Application
    condition: eq(contains(variables['Build.SourceBranch'], 'develop'), 'true')
    jobs:
    - template: deploy-stage.yml  # Template reference
      parameters:
        environment: 'Test'

  - stage: Deploy_to_UAT
    displayName: Deploy To UAT
    dependsOn: Build_Application
    condition: eq(contains(variables['Build.SourceBranch'], 'release'), 'true')
    jobs:
    - template: deploy-stage.yml  # Template reference
      parameters:
        environment: 'UAT'

  - stage: Deploy_to_Production
    displayName: Deploy To Production
    dependsOn: Build_Application
    condition: eq(contains(variables['Build.SourceBranch'], 'main'), 'true')
    jobs:
    - template: deploy-stage.yml  # Template reference
      parameters:
        environment: 'Prod'